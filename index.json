[{"content":"Protect your SIP Servers from bad actors Introduction SentryPeerÂ® is a fraud detection tool. It lets bad actors try to make phone calls and saves the IP address they came from and number they tried to call. Those details can then be used to raise notifications at the service providers network and the next time a user/customer tries to call a collected number, you can act anyway you see fit.\nFor example:\nLet\u0026rsquo;s say you are running your own VoIP PBX on site. What SentryPeer will allow you to do in this context, is dip into the list of phone numbers (using the RESTful API) when your users are making outbound calls. If you get a hit, you\u0026rsquo;ll get a heads-up that potentially a device within your network is trying to call known probing phone numbers that have either been:\nNumbers collected by SentryPeer nodes you are running yourself Numbers seen by other SentryPeer nodes which have been replicated to your node via the peer to peer network This would allow you to generate a notification from your monitoring systems before you rack up any expensive calls or something worse happens.\nWhat would lead to this scenario?\nPotential voicemail fraud. This can happen if you allow calling an inbound number (your DID/DDI) to get to your voicemail system, then prompt for a PIN. This PIN is weak and the voicemail system allows you to press \u0026lsquo;*\u0026rsquo; to call back the Caller ID that left a voicemail. The attacker has left a voicemail, and they then guess your PIN and call it back. The CLI is a known number that SentryPeer has seen. You can alert on it. A device has been hijacked and/or a softphone or similar is using the credentials they stole off the phone\u0026rsquo;s GUI and is trying to register to your system and make calls to a number seen by SentryPeer. An innocent user is calling a phishing number or known expensive number etc. that SentryPeer has seen before. Traditionally this data is shipped to a central place, so you don\u0026rsquo;t own the data you\u0026rsquo;ve collected. This project is all about Peer to Peer sharing of that data. The user owning the data and various Service Provider / Network Provider related feeds of the data is the key bit for me. I\u0026rsquo;m sick of all the services out there that keep it and sell it. If you\u0026rsquo;ve collected it, you should have the choice to keep it and/or opt in to share it with other SentryPeer community members via p2p methods.\nFeatures All code Free/Libre and Open Source Software FAST User owns their data User can submit their own data if they want to (you need to enable p2p mode - -p) User gets other users\u0026rsquo; data ONLY IF they opt in to submit their data to the pool Embedded Distributed Hash Table (DHT) node using OpenDHT (-p cli option) Peer to Peer sharing of collected bad_actors using OpenDHT (default on) Peer to Peer data replication to receive collected bad_actors using OpenDHT (default on) Set your own DHT bootstrap node (-b cli option) Multithreaded UDP transport TCP transport TLS transport JSON logging to a file SIP mode can be disabled. This allows you to run SentryPeer in API mode or DHT mode only etc. i.e. not as a honeypot, but as a node in the SentryPeer community or to just serve replicated data SIP responsive mode can be enabled to collect data - cli / env flag Local data copy for fast access - cli / env db location flag Local API for fast access - cli / env flag WebHook for POSTing bad actor json to a central location - cli / env flag Query API for IP addresses of bad actors Query API for IPSET of bad actors Query API for a particular IP address of a bad actor Query API for attempted phone numbers called by bad actors Query API for an attempted phone number called by a bad actor Fail2Ban support via syslog as per feature request Local sqlite database - feature / cli flag Analytics - opt in SDKs/libs for external access - CGRateS to start with or our own firewall with nftables Small binary size for IoT usage Cross-platform Firewall options to use distributed data in real time - DHT? Container on Docker Hub for latest build BGP agent to peer with for blackholing collected IP addresses (similar to Team Cymru Bogon Router Server Project) SIP agent to return 404 or default destination for SIP redirects Talks TADSummit 2021 - https://blog.tadsummit.com/2021/11/17/sentrypeer/ CommCon 2021 - https://2021.commcon.xyz/talks/sentrypeer-a-distributed-peer-to-peer-list-of-bad-ip-addresses-and-phone-numbers-collected-via-a-sip-honeypot ClueCon Weekly 2022 - https://youtu.be/DFxGHJI_0Wg UKNOF49 2022 (presentation slides) - https://indico.uknof.org.uk/event/59/contributions/801/ Adoption Kali Linux Deutsche Telekom T-Pot - The All In One Honeypot Platform v22 onwards Design I started this because I wanted to do C network programming as all the projects I use daily are in C like PostgreSQL, OpenLDAP, FreeSWITCH, OpenSIPS, Asterisk etc. See Episode 414: Jens Gustedt on Modern C for why C is a good choice. For those interested, see my full podcast show list (https://www.se-radio.net/team/gavin-henry/) for Software Engineering Radio\nDocker You can run the latest version of SentryPeer with Docker. The latest version is available from Docker Hub. Or build yourself:\nsudo docker build --no-cache -t sentrypeer . sudo docker run -d -p 5050:5060/tcp -p 5060:5060/udp -p 8082:8082 -p 4222:4222/udp sentrypeer:latest Then you can check at http://localhost:8082/ip-addresses and http://localhost:8082/health-check to see if it\u0026rsquo;s running.\nEnvironment Variables ENV SENTRYPEER_DB_FILE=/my/location/sentrypeer.db ENV SENTRYPEER_API=1 ENV SENTRYPEER_WEBHOOK_URL=https://my.webhook.url/events ENV SENTRYPEER_SIP_RESPONSIVE=1 ENV SENTRYPEER_SIP_DISABLE=1 ENV SENTRYPEER_SYSLOG=1 ENV SENTRYPEER_PEER_TO_PEER=1 ENV SENTRYPEER_BOOTSTRAP_NODE=mybootstrapnode.com ENV SENTRYPEER_JSON_LOG=1 ENV SENTRYPEER_JSON_LOG_FILE=/my/location/sentrypeer_json.log ENV SENTRYPEER_VERBOSE=1 ENV SENTRYPEER_DEBUG=1 Either set these in the Dockerfile or in your Dockerfile.env file or docker run command.\nInstallation Debian or Fedora packages are always available from the release page for the current version of SentryPeer:\nhttps://github.com/SentryPeer/SentryPeer/releases\nHomebrew (macOS or Linux): We have a Homebrew Tap for this project (until we get more popular):\nbrew tap sentrypeer/sentrypeer brew install sentrypeer Alpine Linux: SentryPeer is in testing on Alpine Linux, so you can install it with the following command:\napk -U add --no-cache -X https://dl-cdn.alpinelinux.org/alpine/edge/testing sentrypeer Ubuntu Package You can install SentryPeer from our Ubuntu PPD which is currently for Ubuntu 20 LTS (Focal Fossa):\nsudo apt install software-properties-common sudo add-apt-repository ppa:gavinhenry/sentrypeer sudo apt-get update This PPA can be added to your system manually by copying the lines below and adding them to your system\u0026rsquo;s software sources:\ndeb https://ppa.launchpadcontent.net/gavinhenry/sentrypeer/ubuntu focal main deb-src https://ppa.launchpadcontent.net/gavinhenry/sentrypeer/ubuntu focal main Then you can install SentryPeer:\nsudo apt-get install sentrypeer Building from source You have two options for installation from source. CMake or autotools. Autotools is recommended at the moment. A release is an autotools build.\nIf you are a Fedora user, you can install this via Fedora copr:\nhttps://copr.fedorainfracloud.org/coprs/ghenry/SentryPeer/\nIf you are going to build from this repository, you will need to have the following installed:\ngit, autoconf, automake and autoconf-archive (Debian/Ubuntu) libosip2-dev (Debian/Ubuntu) or libosip2-devel (Fedora) libsqlite3-dev (Debian/Ubuntu) or sqlite-devel (Fedora) uuid-dev (Debian/Ubuntu) or libuuid-devel (Fedora) libmicrohttpd-dev (Debian/Ubuntu) or libmicrohttpd-devel (Fedora) libjansson-dev (Debian/Ubuntu) or jansson-devel (Fedora) libpcre2-dev (Debian/Ubuntu) or pcre2-devel (Fedora) libcurl-dev (Debian/Ubuntu) or libcurl-devel (Fedora) libcmocka-dev (Debian/Ubuntu) or libcmocka-devel (Fedora) - for unit tests Debian/Ubuntu:\nsudo apt-get install git build-essential autoconf-archive autoconf automake libosip2-dev libsqlite3-dev \\ libcmocka-dev uuid-dev libcurl4-openssl-dev libpcre2-dev libjansson-dev libmicrohttpd-dev Fedora:\nsudo dnf install git autoconf automake autoconf-archive libosip2-devel libsqlite3-devel libcmocka-devel \\ libuuid-devel libmicrohttpd-devel jansson-devel libcurl-devel pcre2-devel macOS:\nbrew install git autoconf automake autoconf-archive libosip cmocka libmicrohttpd jansson curl pcre2 then (make check is highly recommended):\n./bootstrap.sh ./configure make make check make install Running SentryPeer Once built, you can run like so to start in debug mode, respond to SIP probes, enable the RESTful API, enable WebHooks and enable syslog logging (use a package if you want systemd):\n./sentrypeer -draps SentryPeer node id: e5ac3a88-3d52-4e84-b70c-b2ce83992d02 Starting sentrypeer... API mode enabled, starting http daemon... SIP mode enabled... Peer to Peer DHT mode enabled... Starting peer to peer DHT mode using OpenDHT-C lib version '2.4.0'... Configuring local address... Creating sockets... Binding sockets to local address... Listening for incoming UDP connections... SIP responsive mode enabled. Will reply to SIP probes... Listening for incoming TCP connections... Peer to peer DHT mode started. DHT InfoHash for key 'bad_actors' is: 14d30143330e2e0e922ed4028a60ff96a59800ad Bootstrapping the DHT Waiting 5 seconds for bootstrapping to bootstrap.sentrypeer.org... Listening for changes to the bad_actors DHT key when you get a probe request, you can see something like the following in the terminal:\nReceived (411 bytes): OPTIONS sip:100@XXX.XXX.XXX.XXX SIP/2.0 Via: SIP/2.0/UDP 91.223.3.152:5173;branch=z9hG4bK-515761064;rport Content-Length: 0 From: \u0026#34;sipvicious\u0026#34;\u0026lt;sip:100@1.1.1.1\u0026gt;;tag=6434396633623535313363340131363131333837383137 Accept: application/sdp User-Agent: friendly-scanner To: \u0026#34;sipvicious\u0026#34;\u0026lt;sip:100@1.1.1.1\u0026gt; Contact: sip:100@91.223.3.152:5173 CSeq: 1 OPTIONS Call-ID: 679894155883566215079442 Max-Forwards: 70 read_packet_buf size is: 1024: read_packet_buf length is: 468: bytes_received size is: 411: Bad Actor is: Event Timestamp: 2021-11-23 20:13:36.427515810 Event UUID: fac3fa20-8c2c-445b-8661-50a70fa9e873 SIP Message: OPTIONS sip:100@XXX.XXX.XXX.XXX SIP/2.0 Via: SIP/2.0/UDP 91.223.3.152:5173;branch=z9hG4bK-515761064;rport From: \u0026#34;sipvicious\u0026#34; \u0026lt;sip:100@1.1.1.1\u0026gt;;tag=6434396633623535313363340131363131333837383137 To: \u0026#34;sipvicious\u0026#34; \u0026lt;sip:100@1.1.1.1\u0026gt; Call-ID: 679894155883566215079442 CSeq: 1 OPTIONS Contact: \u0026lt;sip:100@91.223.3.152:5173\u0026gt; Accept: application/sdp User-agent: friendly-scanner Max-forwards: 70 Content-Length: 0 Source IP: 193.107.216.27 Called Number: 100 SIP Method: OPTIONS Transport Type: UDP User Agent: friendly-scanner Collected Method: responsive Created by Node Id: fac3fa20-8c2c-445b-8661-50a70fa9e873 SentryPeer db file location is: sentrypeer.db Destination IP address of UDP packet is: xx.xx.xx.xx You can see the data in the sqlite3 database called sentrypeer.db using sqlitebrowser or sqlite3 command line tool.\nHere\u0026rsquo;s a screenshot of the database opened using sqlitebrowser (it\u0026rsquo;s big, so I\u0026rsquo;ll just link to the image):\nsqlitebrowser exploring the sentrypeer.db\nWebHook There is a WebHook to POST a JSON Log Format payload to SentryPeerHQ or your own WebHook endpoint. The WebHook is not enabled by default. You can configure the WebHook URL via -w or set the SENTRYPEER_WEBHOOK_URL env variable.\nRESTful API The RESTful API is complete for the current use cases. Please click the Watch button to be notified when more things come out :-)\nEndpoint /health-check Query the API to see if it\u0026rsquo;s alive:\ncurl -v -H \u0026#34;Content-Type: application/json\u0026#34; http://localhost:8082/health-check * Connected to localhost (127.0.0.1) port 8082 (#0) \u0026gt; GET /health-check HTTP/1.1 \u0026gt; Host: localhost:8082 \u0026gt; User-Agent: curl/7.79.1 \u0026gt; Accept: */* \u0026gt; Content-Type: application/json \u0026gt; * Mark bundle as not supporting multiuse \u0026lt; HTTP/1.1 200 OK \u0026lt; Date: Mon, 24 Apr 2022 11:16:25 GMT \u0026lt; Content-Type: application/json \u0026lt; Access-Control-Allow-Origin: * \u0026lt; X-Powered-By: SentryPeer \u0026lt; X-SentryPeer-Version: 1.4.0 \u0026lt; Content-Length: 81 \u0026lt; { \u0026#34;status\u0026#34;: \u0026#34;OK\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;Hello from SentryPeer!\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34; } Endpoint /ip-addresses List all the IP addresses that have been seen by SentryPeer:\ncurl -v -H \u0026#34;Content-Type: application/json\u0026#34; http://localhost:8082/ip-addresses * Connected to localhost (127.0.0.1) port 8082 (#0) \u0026gt; GET /ip-addresses HTTP/1.1 \u0026gt; Host: localhost:8082 \u0026gt; User-Agent: curl/7.79.1 \u0026gt; Accept: */* \u0026gt; Content-Type: application/json \u0026gt; * Mark bundle as not supporting multiuse \u0026lt; HTTP/1.1 200 OK \u0026lt; Date: Mon, 24 Jan 2022 11:17:05 GMT \u0026lt; Content-Type: application/json \u0026lt; Access-Control-Allow-Origin: * \u0026lt; X-Powered-By: SentryPeer \u0026lt; X-SentryPeer-Version: 1.0.0 \u0026lt; Content-Length: 50175 \u0026lt; { \u0026#34;ip_addresses_total\u0026#34;: 396, \u0026#34;ip_addresses\u0026#34;: [ { \u0026#34;ip_address\u0026#34;: \u0026#34;193.107.216.27\u0026#34;, \u0026#34;seen_last\u0026#34;: \u0026#34;2022-01-11 13:30:48.703603359\u0026#34;, \u0026#34;seen_count\u0026#34;:\t\u0026#34;1263\u0026#34; }, { \u0026#34;ip_address\u0026#34;: \u0026#34;193.46.255.152\u0026#34; \u0026#34;seen_last\u0026#34;: \u0026#34;2022-01-11 13:28:27.348926406\u0026#34;, \u0026#34;seen_count\u0026#34;: \u0026#34;3220\u0026#34; } ... ] } Endpoint /ip-address/{ip-address} Query a single IP address:\ncurl -v -H \u0026#34;Content-Type: application/json\u0026#34; http://localhost:8082/ip-address/8.8.8.8 * Connected to localhost (127.0.0.1) port 8082 (#0) \u0026gt; GET /ip-addresses/8.8.8.8 HTTP/1.1 \u0026gt; Host: localhost:8082 \u0026gt; User-Agent: curl/7.79.1 \u0026gt; Accept: */* \u0026gt; Content-Type: application/json \u0026gt; * Mark bundle as not supporting multiuse \u0026lt; HTTP/1.1 404 Not Found \u0026lt; Date: Mon, 24 Jan 2022 11:17:57 GMT \u0026lt; Content-Type: application/json \u0026lt; Access-Control-Allow-Origin: * \u0026lt; X-Powered-By: SentryPeer \u0026lt; X-SentryPeer-Version: 1.0.0 \u0026lt; Content-Length: 33 \u0026lt; * Connection #0 to host localhost left intact { \u0026#34;message\u0026#34;: \u0026#34;No bad actor found\u0026#34; } Endpoint /numbers/{phone-number} Query a phone number a bad actor tried to call with optional + prefix:\ncurl -v -H \u0026#34;Content-Type: application/json\u0026#34; http://localhost:8082/numbers/8784946812410967 * Connected to localhost (127.0.0.1) port 8082 (#0) \u0026gt; GET /numbers/8784946812410967 HTTP/1.1 \u0026gt; Host: localhost:8082 \u0026gt; User-Agent: curl/7.79.1 \u0026gt; Accept: */* \u0026gt; Content-Type: application/json \u0026gt; * Mark bundle as not supporting multiuse \u0026lt; HTTP/1.1 200 OK \u0026lt; Date: Mon, 24 Jan 2022 11:19:53 GMT \u0026lt; Content-Type: application/json \u0026lt; Access-Control-Allow-Origin: * \u0026lt; X-Powered-By: SentryPeer \u0026lt; X-SentryPeer-Version: 1.0.0 \u0026lt; Content-Length: 46 \u0026lt; { \u0026#34;phone_number_found\u0026#34;: \u0026#34;8784946812410967\u0026#34; } Syslog and Fail2ban With sentrypeer -s, you parse syslog and use Fail2Ban to block the IP address of the bad actor:\nNov 30 21:32:16 localhost.localdomain sentrypeer[303741]: Source IP: 144.21.55.36, Method: OPTIONS, Agent: sipsak 0.9.7 JSON Log Format With sentrypeer -j, you can produce a JSON log file of the bad actor\u0026rsquo;s IP address and the phone number they tried to call plus other metadata (set a custom log file location with -l):\n{ \u0026#34;app_name\u0026#34;:\u0026#34;sentrypeer\u0026#34;, \u0026#34;app_version\u0026#34;:\u0026#34;v1.4.0\u0026#34;, \u0026#34;event_timestamp\u0026#34;:\u0026#34;2022-02-22 11:19:15.848934346\u0026#34;, \u0026#34;event_uuid\u0026#34;:\u0026#34;4503cc92-26cb-4b3e-bb33-69a83fa09321\u0026#34;, \u0026#34;created_by_node_id\u0026#34;:\u0026#34;4503cc92-26cb-4b3e-bb33-69a83fa09321\u0026#34;, \u0026#34;collected_method\u0026#34;:\u0026#34;responsive\u0026#34;, \u0026#34;transport_type\u0026#34;:\u0026#34;UDP\u0026#34;, \u0026#34;source_ip\u0026#34;:\u0026#34;45.134.144.128\u0026#34;, \u0026#34;destination_ip\u0026#34;:\u0026#34;XX.XX.XX.XX\u0026#34;, \u0026#34;called_number\u0026#34;:\u0026#34;0046812118532\u0026#34;, \u0026#34;sip_method\u0026#34;:\u0026#34;OPTIONS\u0026#34;, \u0026#34;sip_user_agent\u0026#34;:\u0026#34;friendly-scanner\u0026#34;, \u0026#34;sip_message\u0026#34;:\u0026#34;full SIP message\u0026#34; } Command Line Options ./sentrypeer -h Usage: sentrypeer [-h] [-V] [-w] [-j] [-p] [-b bootstrap.example.com] [-f fullpath for sentrypeer.db] [-l fullpath for sentrypeer_json.log] [-r] [-R] [-a] [-s] [-v] [-d] Options: -h, Print this help -V, Print version -f, Set \u0026#39;sentrypeer.db\u0026#39; location or use SENTRYPEER_DB_FILE env -j, Enable json logging or use SENTRYPEER_JSON_LOG env -p, Enable Peer to Peer mode or use SENTRYPEER_PEER_TO_PEER env -b, Set Peer to Peer bootstrap node or use SENTRYPEER_BOOTSTRAP_NODE env -a, Enable RESTful API mode or use SENTRYPEER_API env -w, Set WebHook URL for bad actor json POSTs or use SENTRYPEER_WEBHOOK_URL env -r, Enable SIP responsive mode or use SENTRYPEER_SIP_RESPONSIVE env -R, Disable SIP mode completely or use SENTRYPEER_SIP_DISABLE env -l, Set \u0026#39;sentrypeer_json.log\u0026#39; location or use SENTRYPEER_JSON_LOG_FILE env -s, Enable syslog logging or use SENTRYPEER_SYSLOG env -v, Enable verbose logging or use SENTRYPEER_VERBOSE env -d, Enable debug mode or use SENTRYPEER_DEBUG env Report bugs to https://github.com/SentryPeer/SentryPeer/issues See https://sentrypeer.org for more information. IPv6 Multicast Address The project has an IANA IPv6 multicast address for the purpose of sending messages between SentryPeer peers.\nAddresses: FF0X:0:0:0:0:0:0:172 Description: SentryPeer Contact: Gavin Henry \u0026lt;ghenry at sentrypeer.org\u0026gt; Registration Date: 2022-01-26 Please see http://www.iana.org/assignments/ipv6-multicast-addresses\nThe assigned variable-scope address \u0026ndash; which can also be listed as \u0026ldquo;FF0X::172\u0026rdquo; for short \u0026ndash; the \u0026ldquo;X\u0026rdquo; denotes any possible scope.\nLicense Great reading - How to choose a license for your own work\nThis work is dual-licensed under GPL 2.0 and GPL 3.0.\nSPDX-License-Identifier: GPL-2.0-only OR GPL-3.0-only\nContributing See CONTRIBUTING\nProject Website https://sentrypeer.org\nTrademark SENTRYPEER is a registered trademark of Gavin Henry\nQuestions, Bug reports, Feature Requests New issues can be raised at:\nhttps://github.com/SentryPeer/SentryPeer/issues\nIt\u0026rsquo;s okay to raise an issue to ask a question.\nSpecial Thanks Special thanks to:\npsanders from the Routr project for tips on re-working this README.md file. Fly.io for crediting the SentryPeer account for hosting the upcoming SentryPeer HQ web app on their infrastructure AppSignal for Application performance monitoring sponsorship in the SentryPeer HQ web app David Miller for the design of the SentryPeer Web GUI theme and logo. Very kind of you! @garymiller for the feature request of syslog and Fail2ban as per Fail2ban Integration via syslog #6 @joejag for the Pull Request for the start of Terraform recipes to launch SentryPeer on different cloud providers #12 ","permalink":"https://ghenry.co.uk/posts/welcome/","summary":"Protect your SIP Servers from bad actors Introduction SentryPeerÂ® is a fraud detection tool. It lets bad actors try to make phone calls and saves the IP address they came from and number they tried to call. Those details can then be used to raise notifications at the service providers network and the next time a user/customer tries to call a collected number, you can act anyway you see fit.","title":"Protect your SIP Servers from bad actors"}]